// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elf.proto

#include "elf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_elf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EHDR_elf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_elf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_d_un_elf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_elf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dyns_elf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_elf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_phdr_elf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_elf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_shdrs_elf_2eproto;
class EHDRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EHDR> _instance;
} _EHDR_default_instance_;
class phdrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<phdr> _instance;
} _phdr_default_instance_;
class shdrsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<shdrs> _instance;
} _shdrs_default_instance_;
class d_unDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<d_un> _instance;
} _d_un_default_instance_;
class dynsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dyns> _instance;
} _dyns_default_instance_;
class elfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<elf> _instance;
} _elf_default_instance_;
static void InitDefaultsscc_info_EHDR_elf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EHDR_default_instance_;
    new (ptr) ::EHDR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EHDR_elf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EHDR_elf_2eproto}, {}};

static void InitDefaultsscc_info_d_un_elf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_d_un_default_instance_;
    new (ptr) ::d_un();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_d_un_elf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_d_un_elf_2eproto}, {}};

static void InitDefaultsscc_info_dyns_elf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_dyns_default_instance_;
    new (ptr) ::dyns();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dyns_elf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_dyns_elf_2eproto}, {
      &scc_info_d_un_elf_2eproto.base,}};

static void InitDefaultsscc_info_elf_elf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_elf_default_instance_;
    new (ptr) ::elf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_elf_elf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_elf_elf_2eproto}, {
      &scc_info_EHDR_elf_2eproto.base,
      &scc_info_phdr_elf_2eproto.base,
      &scc_info_shdrs_elf_2eproto.base,
      &scc_info_dyns_elf_2eproto.base,}};

static void InitDefaultsscc_info_phdr_elf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_phdr_default_instance_;
    new (ptr) ::phdr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_phdr_elf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_phdr_elf_2eproto}, {}};

static void InitDefaultsscc_info_shdrs_elf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_shdrs_default_instance_;
    new (ptr) ::shdrs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_shdrs_elf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_shdrs_elf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_elf_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_elf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_elf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_elf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::EHDR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EHDR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EHDR, e_ident_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_type_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_machine_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_entry_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_phoff_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_shoff_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_flags_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_ehsize_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_phentsize_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_phnum_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_shentsize_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_shnum_),
  PROTOBUF_FIELD_OFFSET(::EHDR, e_shstrndx_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::phdr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::phdr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phdr, p_type_),
  PROTOBUF_FIELD_OFFSET(::phdr, p_flags_),
  PROTOBUF_FIELD_OFFSET(::phdr, p_offset_),
  PROTOBUF_FIELD_OFFSET(::phdr, p_vaddr_),
  PROTOBUF_FIELD_OFFSET(::phdr, p_addr_),
  PROTOBUF_FIELD_OFFSET(::phdr, filesz_),
  PROTOBUF_FIELD_OFFSET(::phdr, memsz_),
  PROTOBUF_FIELD_OFFSET(::phdr, align_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::shdrs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shdrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_name_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_type_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_flags_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_addr_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_offset_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_size_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_link_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_info_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_addralign_),
  PROTOBUF_FIELD_OFFSET(::shdrs, sh_entsize_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::d_un, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::d_un, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::d_un, d_val_),
  PROTOBUF_FIELD_OFFSET(::d_un, d_ptr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dyns, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dyns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dyns, d_tag_),
  PROTOBUF_FIELD_OFFSET(::dyns, d_ptr_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::elf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::elf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::elf, header_),
  PROTOBUF_FIELD_OFFSET(::elf, phdrz_),
  PROTOBUF_FIELD_OFFSET(::elf, shader_),
  PROTOBUF_FIELD_OFFSET(::elf, dynz_),
  0,
  ~0u,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::EHDR)},
  { 31, 44, sizeof(::phdr)},
  { 52, 67, sizeof(::shdrs)},
  { 77, 84, sizeof(::d_un)},
  { 86, 93, sizeof(::dyns)},
  { 95, 104, sizeof(::elf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EHDR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_phdr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_shdrs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_d_un_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_dyns_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_elf_default_instance_),
};

const char descriptor_table_protodef_elf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\telf.proto\"\364\001\n\004EHDR\022\023\n\007e_ident\030\001 \003(\rB\002\020"
  "\001\022\016\n\006e_type\030\002 \002(\r\022\021\n\te_machine\030\003 \002(\r\022\017\n\007"
  "e_entry\030\004 \002(\r\022\017\n\007e_phoff\030\005 \002(\r\022\017\n\007e_shof"
  "f\030\006 \002(\r\022\017\n\007e_flags\030\007 \002(\r\022\020\n\010e_ehsize\030\010 \002"
  "(\r\022\023\n\013e_phentsize\030\t \002(\r\022\017\n\007e_phnum\030\n \002(\r"
  "\022\023\n\013e_shentsize\030\013 \002(\r\022\017\n\007e_shnum\030\014 \002(\r\022\022"
  "\n\ne_shstrndx\030\r \002(\r\"\210\001\n\004phdr\022\016\n\006p_type\030\001 "
  "\003(\r\022\017\n\007p_flags\030\002 \002(\r\022\020\n\010p_offset\030\003 \002(\r\022\017"
  "\n\007p_vaddr\030\004 \002(\r\022\016\n\006p_addr\030\005 \002(\r\022\016\n\006files"
  "z\030\006 \002(\r\022\r\n\005memsz\030\007 \002(\r\022\r\n\005align\030\010 \002(\r\"\274\001"
  "\n\005shdrs\022\017\n\007sh_name\030\001 \002(\r\022\017\n\007sh_type\030\002 \002("
  "\r\022\020\n\010sh_flags\030\003 \002(\r\022\017\n\007sh_addr\030\004 \002(\r\022\021\n\t"
  "sh_offset\030\005 \002(\r\022\017\n\007sh_size\030\006 \002(\r\022\017\n\007sh_l"
  "ink\030\007 \002(\r\022\017\n\007sh_info\030\010 \002(\r\022\024\n\014sh_addrali"
  "gn\030\t \002(\r\022\022\n\nsh_entsize\030\n \002(\r\"$\n\004d_un\022\r\n\005"
  "d_val\030\001 \002(\r\022\r\n\005d_ptr\030\002 \002(\r\"+\n\004dyns\022\r\n\005d_"
  "tag\030\001 \002(\r\022\024\n\005d_ptr\030\002 \002(\0132\005.d_un\"_\n\003elf\022\025"
  "\n\006header\030\001 \002(\0132\005.EHDR\022\024\n\005phdrz\030\002 \003(\0132\005.p"
  "hdr\022\026\n\006shader\030\003 \003(\0132\006.shdrs\022\023\n\004dynz\030\004 \002("
  "\0132\005.dyns"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_elf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_elf_2eproto_sccs[6] = {
  &scc_info_EHDR_elf_2eproto.base,
  &scc_info_d_un_elf_2eproto.base,
  &scc_info_dyns_elf_2eproto.base,
  &scc_info_elf_elf_2eproto.base,
  &scc_info_phdr_elf_2eproto.base,
  &scc_info_shdrs_elf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_elf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_elf_2eproto = {
  false, false, descriptor_table_protodef_elf_2eproto, "elf.proto", 768,
  &descriptor_table_elf_2eproto_once, descriptor_table_elf_2eproto_sccs, descriptor_table_elf_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_elf_2eproto::offsets,
  file_level_metadata_elf_2eproto, 6, file_level_enum_descriptors_elf_2eproto, file_level_service_descriptors_elf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_elf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_elf_2eproto)), true);

// ===================================================================

class EHDR::_Internal {
 public:
  using HasBits = decltype(std::declval<EHDR>()._has_bits_);
  static void set_has_e_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_e_machine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_e_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_e_phoff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_e_shoff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_e_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_e_ehsize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_e_phentsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_e_phnum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_e_shentsize(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_e_shnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_e_shstrndx(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

EHDR::EHDR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  e_ident_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EHDR)
}
EHDR::EHDR(const EHDR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      e_ident_(from.e_ident_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&e_type_, &from.e_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_shstrndx_) -
    reinterpret_cast<char*>(&e_type_)) + sizeof(e_shstrndx_));
  // @@protoc_insertion_point(copy_constructor:EHDR)
}

void EHDR::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&e_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&e_shstrndx_) -
      reinterpret_cast<char*>(&e_type_)) + sizeof(e_shstrndx_));
}

EHDR::~EHDR() {
  // @@protoc_insertion_point(destructor:EHDR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EHDR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EHDR::ArenaDtor(void* object) {
  EHDR* _this = reinterpret_cast< EHDR* >(object);
  (void)_this;
}
void EHDR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EHDR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EHDR& EHDR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EHDR_elf_2eproto.base);
  return *internal_default_instance();
}


void EHDR::Clear() {
// @@protoc_insertion_point(message_clear_start:EHDR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e_ident_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&e_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e_phentsize_) -
        reinterpret_cast<char*>(&e_type_)) + sizeof(e_phentsize_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&e_phnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e_shstrndx_) -
        reinterpret_cast<char*>(&e_phnum_)) + sizeof(e_shstrndx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EHDR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 e_ident = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_e_ident(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_e_ident(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_e_type(&has_bits);
          e_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_machine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_e_machine(&has_bits);
          e_machine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_entry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_e_entry(&has_bits);
          e_entry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_phoff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_e_phoff(&has_bits);
          e_phoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_shoff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_e_shoff(&has_bits);
          e_shoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_e_flags(&has_bits);
          e_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_ehsize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_e_ehsize(&has_bits);
          e_ehsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_phentsize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_e_phentsize(&has_bits);
          e_phentsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_phnum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_e_phnum(&has_bits);
          e_phnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_shentsize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_e_shentsize(&has_bits);
          e_shentsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_shnum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_e_shnum(&has_bits);
          e_shnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 e_shstrndx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_e_shstrndx(&has_bits);
          e_shstrndx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EHDR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EHDR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 e_ident = 1 [packed = true];
  {
    int byte_size = _e_ident_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_e_ident(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 e_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_e_type(), target);
  }

  // required uint32 e_machine = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_e_machine(), target);
  }

  // required uint32 e_entry = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_e_entry(), target);
  }

  // required uint32 e_phoff = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_e_phoff(), target);
  }

  // required uint32 e_shoff = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_e_shoff(), target);
  }

  // required uint32 e_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_e_flags(), target);
  }

  // required uint32 e_ehsize = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_e_ehsize(), target);
  }

  // required uint32 e_phentsize = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_e_phentsize(), target);
  }

  // required uint32 e_phnum = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_e_phnum(), target);
  }

  // required uint32 e_shentsize = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_e_shentsize(), target);
  }

  // required uint32 e_shnum = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_e_shnum(), target);
  }

  // required uint32 e_shstrndx = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_e_shstrndx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EHDR)
  return target;
}

size_t EHDR::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EHDR)
  size_t total_size = 0;

  if (_internal_has_e_type()) {
    // required uint32 e_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_type());
  }

  if (_internal_has_e_machine()) {
    // required uint32 e_machine = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_machine());
  }

  if (_internal_has_e_entry()) {
    // required uint32 e_entry = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_entry());
  }

  if (_internal_has_e_phoff()) {
    // required uint32 e_phoff = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_phoff());
  }

  if (_internal_has_e_shoff()) {
    // required uint32 e_shoff = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shoff());
  }

  if (_internal_has_e_flags()) {
    // required uint32 e_flags = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_flags());
  }

  if (_internal_has_e_ehsize()) {
    // required uint32 e_ehsize = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_ehsize());
  }

  if (_internal_has_e_phentsize()) {
    // required uint32 e_phentsize = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_phentsize());
  }

  if (_internal_has_e_phnum()) {
    // required uint32 e_phnum = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_phnum());
  }

  if (_internal_has_e_shentsize()) {
    // required uint32 e_shentsize = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shentsize());
  }

  if (_internal_has_e_shnum()) {
    // required uint32 e_shnum = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shnum());
  }

  if (_internal_has_e_shstrndx()) {
    // required uint32 e_shstrndx = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shstrndx());
  }

  return total_size;
}
size_t EHDR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EHDR)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 e_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_type());

    // required uint32 e_machine = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_machine());

    // required uint32 e_entry = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_entry());

    // required uint32 e_phoff = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_phoff());

    // required uint32 e_shoff = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shoff());

    // required uint32 e_flags = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_flags());

    // required uint32 e_ehsize = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_ehsize());

    // required uint32 e_phentsize = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_phentsize());

    // required uint32 e_phnum = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_phnum());

    // required uint32 e_shentsize = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shentsize());

    // required uint32 e_shnum = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shnum());

    // required uint32 e_shstrndx = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_e_shstrndx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 e_ident = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->e_ident_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _e_ident_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EHDR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EHDR)
  GOOGLE_DCHECK_NE(&from, this);
  const EHDR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EHDR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EHDR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EHDR)
    MergeFrom(*source);
  }
}

void EHDR::MergeFrom(const EHDR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EHDR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  e_ident_.MergeFrom(from.e_ident_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      e_type_ = from.e_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      e_machine_ = from.e_machine_;
    }
    if (cached_has_bits & 0x00000004u) {
      e_entry_ = from.e_entry_;
    }
    if (cached_has_bits & 0x00000008u) {
      e_phoff_ = from.e_phoff_;
    }
    if (cached_has_bits & 0x00000010u) {
      e_shoff_ = from.e_shoff_;
    }
    if (cached_has_bits & 0x00000020u) {
      e_flags_ = from.e_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      e_ehsize_ = from.e_ehsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      e_phentsize_ = from.e_phentsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      e_phnum_ = from.e_phnum_;
    }
    if (cached_has_bits & 0x00000200u) {
      e_shentsize_ = from.e_shentsize_;
    }
    if (cached_has_bits & 0x00000400u) {
      e_shnum_ = from.e_shnum_;
    }
    if (cached_has_bits & 0x00000800u) {
      e_shstrndx_ = from.e_shstrndx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EHDR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EHDR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EHDR::CopyFrom(const EHDR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EHDR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EHDR::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EHDR::InternalSwap(EHDR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  e_ident_.InternalSwap(&other->e_ident_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EHDR, e_shstrndx_)
      + sizeof(EHDR::e_shstrndx_)
      - PROTOBUF_FIELD_OFFSET(EHDR, e_type_)>(
          reinterpret_cast<char*>(&e_type_),
          reinterpret_cast<char*>(&other->e_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EHDR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class phdr::_Internal {
 public:
  using HasBits = decltype(std::declval<phdr>()._has_bits_);
  static void set_has_p_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_vaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filesz(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_memsz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_align(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

phdr::phdr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  p_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phdr)
}
phdr::phdr(const phdr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      p_type_(from.p_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&p_flags_, &from.p_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&align_) -
    reinterpret_cast<char*>(&p_flags_)) + sizeof(align_));
  // @@protoc_insertion_point(copy_constructor:phdr)
}

void phdr::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&p_flags_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&align_) -
      reinterpret_cast<char*>(&p_flags_)) + sizeof(align_));
}

phdr::~phdr() {
  // @@protoc_insertion_point(destructor:phdr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void phdr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void phdr::ArenaDtor(void* object) {
  phdr* _this = reinterpret_cast< phdr* >(object);
  (void)_this;
}
void phdr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void phdr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const phdr& phdr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_phdr_elf_2eproto.base);
  return *internal_default_instance();
}


void phdr::Clear() {
// @@protoc_insertion_point(message_clear_start:phdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&p_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&align_) -
        reinterpret_cast<char*>(&p_flags_)) + sizeof(align_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* phdr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 p_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_p_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_p_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 p_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_p_flags(&has_bits);
          p_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 p_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_p_offset(&has_bits);
          p_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 p_vaddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_p_vaddr(&has_bits);
          p_vaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 p_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_p_addr(&has_bits);
          p_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 filesz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_filesz(&has_bits);
          filesz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 memsz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_memsz(&has_bits);
          memsz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 align = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_align(&has_bits);
          align_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* phdr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 p_type = 1;
  for (int i = 0, n = this->_internal_p_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_p_type(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 p_flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_p_flags(), target);
  }

  // required uint32 p_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_p_offset(), target);
  }

  // required uint32 p_vaddr = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_p_vaddr(), target);
  }

  // required uint32 p_addr = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_p_addr(), target);
  }

  // required uint32 filesz = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_filesz(), target);
  }

  // required uint32 memsz = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_memsz(), target);
  }

  // required uint32 align = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_align(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phdr)
  return target;
}

size_t phdr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:phdr)
  size_t total_size = 0;

  if (_internal_has_p_flags()) {
    // required uint32 p_flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_flags());
  }

  if (_internal_has_p_offset()) {
    // required uint32 p_offset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_offset());
  }

  if (_internal_has_p_vaddr()) {
    // required uint32 p_vaddr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_vaddr());
  }

  if (_internal_has_p_addr()) {
    // required uint32 p_addr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_addr());
  }

  if (_internal_has_filesz()) {
    // required uint32 filesz = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_filesz());
  }

  if (_internal_has_memsz()) {
    // required uint32 memsz = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memsz());
  }

  if (_internal_has_align()) {
    // required uint32 align = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_align());
  }

  return total_size;
}
size_t phdr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phdr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 p_flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_flags());

    // required uint32 p_offset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_offset());

    // required uint32 p_vaddr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_vaddr());

    // required uint32 p_addr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p_addr());

    // required uint32 filesz = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_filesz());

    // required uint32 memsz = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memsz());

    // required uint32 align = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_align());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 p_type = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->p_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_p_type_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void phdr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phdr)
  GOOGLE_DCHECK_NE(&from, this);
  const phdr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<phdr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phdr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phdr)
    MergeFrom(*source);
  }
}

void phdr::MergeFrom(const phdr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phdr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  p_type_.MergeFrom(from.p_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      p_flags_ = from.p_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_offset_ = from.p_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      p_vaddr_ = from.p_vaddr_;
    }
    if (cached_has_bits & 0x00000008u) {
      p_addr_ = from.p_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      filesz_ = from.filesz_;
    }
    if (cached_has_bits & 0x00000020u) {
      memsz_ = from.memsz_;
    }
    if (cached_has_bits & 0x00000040u) {
      align_ = from.align_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void phdr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phdr::CopyFrom(const phdr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phdr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void phdr::InternalSwap(phdr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  p_type_.InternalSwap(&other->p_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(phdr, align_)
      + sizeof(phdr::align_)
      - PROTOBUF_FIELD_OFFSET(phdr, p_flags_)>(
          reinterpret_cast<char*>(&p_flags_),
          reinterpret_cast<char*>(&other->p_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata phdr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class shdrs::_Internal {
 public:
  using HasBits = decltype(std::declval<shdrs>()._has_bits_);
  static void set_has_sh_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sh_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sh_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sh_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sh_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sh_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sh_link(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sh_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sh_addralign(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sh_entsize(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

shdrs::shdrs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shdrs)
}
shdrs::shdrs(const shdrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sh_name_, &from.sh_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&sh_entsize_) -
    reinterpret_cast<char*>(&sh_name_)) + sizeof(sh_entsize_));
  // @@protoc_insertion_point(copy_constructor:shdrs)
}

void shdrs::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sh_name_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sh_entsize_) -
      reinterpret_cast<char*>(&sh_name_)) + sizeof(sh_entsize_));
}

shdrs::~shdrs() {
  // @@protoc_insertion_point(destructor:shdrs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void shdrs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void shdrs::ArenaDtor(void* object) {
  shdrs* _this = reinterpret_cast< shdrs* >(object);
  (void)_this;
}
void shdrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void shdrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const shdrs& shdrs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_shdrs_elf_2eproto.base);
  return *internal_default_instance();
}


void shdrs::Clear() {
// @@protoc_insertion_point(message_clear_start:shdrs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&sh_name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sh_info_) -
        reinterpret_cast<char*>(&sh_name_)) + sizeof(sh_info_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&sh_addralign_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sh_entsize_) -
        reinterpret_cast<char*>(&sh_addralign_)) + sizeof(sh_entsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* shdrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 sh_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sh_name(&has_bits);
          sh_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sh_type(&has_bits);
          sh_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sh_flags(&has_bits);
          sh_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sh_addr(&has_bits);
          sh_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sh_offset(&has_bits);
          sh_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sh_size(&has_bits);
          sh_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_link = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sh_link(&has_bits);
          sh_link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sh_info(&has_bits);
          sh_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_addralign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_sh_addralign(&has_bits);
          sh_addralign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sh_entsize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_sh_entsize(&has_bits);
          sh_entsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* shdrs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shdrs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sh_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sh_name(), target);
  }

  // required uint32 sh_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sh_type(), target);
  }

  // required uint32 sh_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sh_flags(), target);
  }

  // required uint32 sh_addr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sh_addr(), target);
  }

  // required uint32 sh_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sh_offset(), target);
  }

  // required uint32 sh_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sh_size(), target);
  }

  // required uint32 sh_link = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sh_link(), target);
  }

  // required uint32 sh_info = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_sh_info(), target);
  }

  // required uint32 sh_addralign = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sh_addralign(), target);
  }

  // required uint32 sh_entsize = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sh_entsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shdrs)
  return target;
}

size_t shdrs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:shdrs)
  size_t total_size = 0;

  if (_internal_has_sh_name()) {
    // required uint32 sh_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_name());
  }

  if (_internal_has_sh_type()) {
    // required uint32 sh_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_type());
  }

  if (_internal_has_sh_flags()) {
    // required uint32 sh_flags = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_flags());
  }

  if (_internal_has_sh_addr()) {
    // required uint32 sh_addr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_addr());
  }

  if (_internal_has_sh_offset()) {
    // required uint32 sh_offset = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_offset());
  }

  if (_internal_has_sh_size()) {
    // required uint32 sh_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_size());
  }

  if (_internal_has_sh_link()) {
    // required uint32 sh_link = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_link());
  }

  if (_internal_has_sh_info()) {
    // required uint32 sh_info = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_info());
  }

  if (_internal_has_sh_addralign()) {
    // required uint32 sh_addralign = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_addralign());
  }

  if (_internal_has_sh_entsize()) {
    // required uint32 sh_entsize = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_entsize());
  }

  return total_size;
}
size_t shdrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shdrs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required uint32 sh_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_name());

    // required uint32 sh_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_type());

    // required uint32 sh_flags = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_flags());

    // required uint32 sh_addr = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_addr());

    // required uint32 sh_offset = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_offset());

    // required uint32 sh_size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_size());

    // required uint32 sh_link = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_link());

    // required uint32 sh_info = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_info());

    // required uint32 sh_addralign = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_addralign());

    // required uint32 sh_entsize = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sh_entsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void shdrs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shdrs)
  GOOGLE_DCHECK_NE(&from, this);
  const shdrs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<shdrs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shdrs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shdrs)
    MergeFrom(*source);
  }
}

void shdrs::MergeFrom(const shdrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shdrs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sh_name_ = from.sh_name_;
    }
    if (cached_has_bits & 0x00000002u) {
      sh_type_ = from.sh_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sh_flags_ = from.sh_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      sh_addr_ = from.sh_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      sh_offset_ = from.sh_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      sh_size_ = from.sh_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      sh_link_ = from.sh_link_;
    }
    if (cached_has_bits & 0x00000080u) {
      sh_info_ = from.sh_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      sh_addralign_ = from.sh_addralign_;
    }
    if (cached_has_bits & 0x00000200u) {
      sh_entsize_ = from.sh_entsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void shdrs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shdrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shdrs::CopyFrom(const shdrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shdrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shdrs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void shdrs::InternalSwap(shdrs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(shdrs, sh_entsize_)
      + sizeof(shdrs::sh_entsize_)
      - PROTOBUF_FIELD_OFFSET(shdrs, sh_name_)>(
          reinterpret_cast<char*>(&sh_name_),
          reinterpret_cast<char*>(&other->sh_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata shdrs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class d_un::_Internal {
 public:
  using HasBits = decltype(std::declval<d_un>()._has_bits_);
  static void set_has_d_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_d_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

d_un::d_un(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:d_un)
}
d_un::d_un(const d_un& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&d_val_, &from.d_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_ptr_) -
    reinterpret_cast<char*>(&d_val_)) + sizeof(d_ptr_));
  // @@protoc_insertion_point(copy_constructor:d_un)
}

void d_un::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&d_val_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&d_ptr_) -
      reinterpret_cast<char*>(&d_val_)) + sizeof(d_ptr_));
}

d_un::~d_un() {
  // @@protoc_insertion_point(destructor:d_un)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void d_un::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void d_un::ArenaDtor(void* object) {
  d_un* _this = reinterpret_cast< d_un* >(object);
  (void)_this;
}
void d_un::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void d_un::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const d_un& d_un::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_d_un_elf_2eproto.base);
  return *internal_default_instance();
}


void d_un::Clear() {
// @@protoc_insertion_point(message_clear_start:d_un)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&d_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&d_ptr_) -
        reinterpret_cast<char*>(&d_val_)) + sizeof(d_ptr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* d_un::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 d_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_d_val(&has_bits);
          d_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 d_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_d_ptr(&has_bits);
          d_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* d_un::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:d_un)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 d_val = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_d_val(), target);
  }

  // required uint32 d_ptr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_d_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:d_un)
  return target;
}

size_t d_un::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:d_un)
  size_t total_size = 0;

  if (_internal_has_d_val()) {
    // required uint32 d_val = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d_val());
  }

  if (_internal_has_d_ptr()) {
    // required uint32 d_ptr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d_ptr());
  }

  return total_size;
}
size_t d_un::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:d_un)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 d_val = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d_val());

    // required uint32 d_ptr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d_ptr());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void d_un::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:d_un)
  GOOGLE_DCHECK_NE(&from, this);
  const d_un* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<d_un>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:d_un)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:d_un)
    MergeFrom(*source);
  }
}

void d_un::MergeFrom(const d_un& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:d_un)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      d_val_ = from.d_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      d_ptr_ = from.d_ptr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void d_un::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:d_un)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void d_un::CopyFrom(const d_un& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:d_un)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool d_un::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void d_un::InternalSwap(d_un* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(d_un, d_ptr_)
      + sizeof(d_un::d_ptr_)
      - PROTOBUF_FIELD_OFFSET(d_un, d_val_)>(
          reinterpret_cast<char*>(&d_val_),
          reinterpret_cast<char*>(&other->d_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata d_un::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class dyns::_Internal {
 public:
  using HasBits = decltype(std::declval<dyns>()._has_bits_);
  static void set_has_d_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::d_un& d_ptr(const dyns* msg);
  static void set_has_d_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::d_un&
dyns::_Internal::d_ptr(const dyns* msg) {
  return *msg->d_ptr_;
}
dyns::dyns(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dyns)
}
dyns::dyns(const dyns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_d_ptr()) {
    d_ptr_ = new ::d_un(*from.d_ptr_);
  } else {
    d_ptr_ = nullptr;
  }
  d_tag_ = from.d_tag_;
  // @@protoc_insertion_point(copy_constructor:dyns)
}

void dyns::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dyns_elf_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&d_ptr_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&d_tag_) -
      reinterpret_cast<char*>(&d_ptr_)) + sizeof(d_tag_));
}

dyns::~dyns() {
  // @@protoc_insertion_point(destructor:dyns)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dyns::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete d_ptr_;
}

void dyns::ArenaDtor(void* object) {
  dyns* _this = reinterpret_cast< dyns* >(object);
  (void)_this;
}
void dyns::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dyns::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dyns& dyns::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dyns_elf_2eproto.base);
  return *internal_default_instance();
}


void dyns::Clear() {
// @@protoc_insertion_point(message_clear_start:dyns)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(d_ptr_ != nullptr);
    d_ptr_->Clear();
  }
  d_tag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dyns::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 d_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_d_tag(&has_bits);
          d_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .d_un d_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_d_ptr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dyns::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyns)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 d_tag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_d_tag(), target);
  }

  // required .d_un d_ptr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::d_ptr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyns)
  return target;
}

size_t dyns::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dyns)
  size_t total_size = 0;

  if (_internal_has_d_ptr()) {
    // required .d_un d_ptr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_ptr_);
  }

  if (_internal_has_d_tag()) {
    // required uint32 d_tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d_tag());
  }

  return total_size;
}
size_t dyns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dyns)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .d_un d_ptr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_ptr_);

    // required uint32 d_tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d_tag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dyns::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dyns)
  GOOGLE_DCHECK_NE(&from, this);
  const dyns* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dyns>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dyns)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dyns)
    MergeFrom(*source);
  }
}

void dyns::MergeFrom(const dyns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dyns)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_d_ptr()->::d_un::MergeFrom(from._internal_d_ptr());
    }
    if (cached_has_bits & 0x00000002u) {
      d_tag_ = from.d_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dyns::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dyns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dyns::CopyFrom(const dyns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dyns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dyns::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_d_ptr()) {
    if (!d_ptr_->IsInitialized()) return false;
  }
  return true;
}

void dyns::InternalSwap(dyns* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dyns, d_tag_)
      + sizeof(dyns::d_tag_)
      - PROTOBUF_FIELD_OFFSET(dyns, d_ptr_)>(
          reinterpret_cast<char*>(&d_ptr_),
          reinterpret_cast<char*>(&other->d_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata dyns::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class elf::_Internal {
 public:
  using HasBits = decltype(std::declval<elf>()._has_bits_);
  static const ::EHDR& header(const elf* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dyns& dynz(const elf* msg);
  static void set_has_dynz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::EHDR&
elf::_Internal::header(const elf* msg) {
  return *msg->header_;
}
const ::dyns&
elf::_Internal::dynz(const elf* msg) {
  return *msg->dynz_;
}
elf::elf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phdrz_(arena),
  shader_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:elf)
}
elf::elf(const elf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      phdrz_(from.phdrz_),
      shader_(from.shader_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::EHDR(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_dynz()) {
    dynz_ = new ::dyns(*from.dynz_);
  } else {
    dynz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:elf)
}

void elf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_elf_elf_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dynz_) -
      reinterpret_cast<char*>(&header_)) + sizeof(dynz_));
}

elf::~elf() {
  // @@protoc_insertion_point(destructor:elf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void elf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete dynz_;
}

void elf::ArenaDtor(void* object) {
  elf* _this = reinterpret_cast< elf* >(object);
  (void)_this;
}
void elf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void elf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const elf& elf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_elf_elf_2eproto.base);
  return *internal_default_instance();
}


void elf::Clear() {
// @@protoc_insertion_point(message_clear_start:elf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phdrz_.Clear();
  shader_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dynz_ != nullptr);
      dynz_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* elf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .EHDR header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phdr phdrz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phdrz(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .shdrs shader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shader(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .dyns dynz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* elf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:elf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EHDR header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .phdr phdrz = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phdrz_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_phdrz(i), target, stream);
  }

  // repeated .shdrs shader = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shader_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shader(i), target, stream);
  }

  // required .dyns dynz = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dynz(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elf)
  return target;
}

size_t elf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:elf)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .EHDR header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_dynz()) {
    // required .dyns dynz = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynz_);
  }

  return total_size;
}
size_t elf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elf)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .EHDR header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required .dyns dynz = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynz_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phdr phdrz = 2;
  total_size += 1UL * this->_internal_phdrz_size();
  for (const auto& msg : this->phdrz_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .shdrs shader = 3;
  total_size += 1UL * this->_internal_shader_size();
  for (const auto& msg : this->shader_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void elf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:elf)
  GOOGLE_DCHECK_NE(&from, this);
  const elf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<elf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:elf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:elf)
    MergeFrom(*source);
  }
}

void elf::MergeFrom(const elf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phdrz_.MergeFrom(from.phdrz_);
  shader_.MergeFrom(from.shader_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::EHDR::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dynz()->::dyns::MergeFrom(from._internal_dynz());
    }
  }
}

void elf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:elf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void elf::CopyFrom(const elf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool elf::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(phdrz_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shader_)) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_dynz()) {
    if (!dynz_->IsInitialized()) return false;
  }
  return true;
}

void elf::InternalSwap(elf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phdrz_.InternalSwap(&other->phdrz_);
  shader_.InternalSwap(&other->shader_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(elf, dynz_)
      + sizeof(elf::dynz_)
      - PROTOBUF_FIELD_OFFSET(elf, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata elf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EHDR* Arena::CreateMaybeMessage< ::EHDR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EHDR >(arena);
}
template<> PROTOBUF_NOINLINE ::phdr* Arena::CreateMaybeMessage< ::phdr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phdr >(arena);
}
template<> PROTOBUF_NOINLINE ::shdrs* Arena::CreateMaybeMessage< ::shdrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shdrs >(arena);
}
template<> PROTOBUF_NOINLINE ::d_un* Arena::CreateMaybeMessage< ::d_un >(Arena* arena) {
  return Arena::CreateMessageInternal< ::d_un >(arena);
}
template<> PROTOBUF_NOINLINE ::dyns* Arena::CreateMaybeMessage< ::dyns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dyns >(arena);
}
template<> PROTOBUF_NOINLINE ::elf* Arena::CreateMaybeMessage< ::elf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::elf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
