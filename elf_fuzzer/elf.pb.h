// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_elf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_elf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_elf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_elf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_elf_2eproto;
class EHDR;
class EHDRDefaultTypeInternal;
extern EHDRDefaultTypeInternal _EHDR_default_instance_;
class d_un;
class d_unDefaultTypeInternal;
extern d_unDefaultTypeInternal _d_un_default_instance_;
class dyns;
class dynsDefaultTypeInternal;
extern dynsDefaultTypeInternal _dyns_default_instance_;
class elf;
class elfDefaultTypeInternal;
extern elfDefaultTypeInternal _elf_default_instance_;
class phdr;
class phdrDefaultTypeInternal;
extern phdrDefaultTypeInternal _phdr_default_instance_;
class shdrs;
class shdrsDefaultTypeInternal;
extern shdrsDefaultTypeInternal _shdrs_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EHDR* Arena::CreateMaybeMessage<::EHDR>(Arena*);
template<> ::d_un* Arena::CreateMaybeMessage<::d_un>(Arena*);
template<> ::dyns* Arena::CreateMaybeMessage<::dyns>(Arena*);
template<> ::elf* Arena::CreateMaybeMessage<::elf>(Arena*);
template<> ::phdr* Arena::CreateMaybeMessage<::phdr>(Arena*);
template<> ::shdrs* Arena::CreateMaybeMessage<::shdrs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EHDR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EHDR) */ {
 public:
  inline EHDR() : EHDR(nullptr) {}
  virtual ~EHDR();

  EHDR(const EHDR& from);
  EHDR(EHDR&& from) noexcept
    : EHDR() {
    *this = ::std::move(from);
  }

  inline EHDR& operator=(const EHDR& from) {
    CopyFrom(from);
    return *this;
  }
  inline EHDR& operator=(EHDR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EHDR& default_instance();

  static inline const EHDR* internal_default_instance() {
    return reinterpret_cast<const EHDR*>(
               &_EHDR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EHDR& a, EHDR& b) {
    a.Swap(&b);
  }
  inline void Swap(EHDR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EHDR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EHDR* New() const final {
    return CreateMaybeMessage<EHDR>(nullptr);
  }

  EHDR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EHDR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EHDR& from);
  void MergeFrom(const EHDR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EHDR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EHDR";
  }
  protected:
  explicit EHDR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elf_2eproto);
    return ::descriptor_table_elf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEIdentFieldNumber = 1,
    kETypeFieldNumber = 2,
    kEMachineFieldNumber = 3,
    kEEntryFieldNumber = 4,
    kEPhoffFieldNumber = 5,
    kEShoffFieldNumber = 6,
    kEFlagsFieldNumber = 7,
    kEEhsizeFieldNumber = 8,
    kEPhentsizeFieldNumber = 9,
    kEPhnumFieldNumber = 10,
    kEShentsizeFieldNumber = 11,
    kEShnumFieldNumber = 12,
    kEShstrndxFieldNumber = 13,
  };
  // repeated uint32 e_ident = 1 [packed = true];
  int e_ident_size() const;
  private:
  int _internal_e_ident_size() const;
  public:
  void clear_e_ident();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_ident(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_e_ident() const;
  void _internal_add_e_ident(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_e_ident();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 e_ident(int index) const;
  void set_e_ident(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_e_ident(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      e_ident() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_e_ident();

  // required uint32 e_type = 2;
  bool has_e_type() const;
  private:
  bool _internal_has_e_type() const;
  public:
  void clear_e_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_type() const;
  void set_e_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_type() const;
  void _internal_set_e_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_machine = 3;
  bool has_e_machine() const;
  private:
  bool _internal_has_e_machine() const;
  public:
  void clear_e_machine();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_machine() const;
  void set_e_machine(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_machine() const;
  void _internal_set_e_machine(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_entry = 4;
  bool has_e_entry() const;
  private:
  bool _internal_has_e_entry() const;
  public:
  void clear_e_entry();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_entry() const;
  void set_e_entry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_entry() const;
  void _internal_set_e_entry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_phoff = 5;
  bool has_e_phoff() const;
  private:
  bool _internal_has_e_phoff() const;
  public:
  void clear_e_phoff();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_phoff() const;
  void set_e_phoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_phoff() const;
  void _internal_set_e_phoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_shoff = 6;
  bool has_e_shoff() const;
  private:
  bool _internal_has_e_shoff() const;
  public:
  void clear_e_shoff();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shoff() const;
  void set_e_shoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_shoff() const;
  void _internal_set_e_shoff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_flags = 7;
  bool has_e_flags() const;
  private:
  bool _internal_has_e_flags() const;
  public:
  void clear_e_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_flags() const;
  void set_e_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_flags() const;
  void _internal_set_e_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_ehsize = 8;
  bool has_e_ehsize() const;
  private:
  bool _internal_has_e_ehsize() const;
  public:
  void clear_e_ehsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_ehsize() const;
  void set_e_ehsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_ehsize() const;
  void _internal_set_e_ehsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_phentsize = 9;
  bool has_e_phentsize() const;
  private:
  bool _internal_has_e_phentsize() const;
  public:
  void clear_e_phentsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_phentsize() const;
  void set_e_phentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_phentsize() const;
  void _internal_set_e_phentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_phnum = 10;
  bool has_e_phnum() const;
  private:
  bool _internal_has_e_phnum() const;
  public:
  void clear_e_phnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_phnum() const;
  void set_e_phnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_phnum() const;
  void _internal_set_e_phnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_shentsize = 11;
  bool has_e_shentsize() const;
  private:
  bool _internal_has_e_shentsize() const;
  public:
  void clear_e_shentsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shentsize() const;
  void set_e_shentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_shentsize() const;
  void _internal_set_e_shentsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_shnum = 12;
  bool has_e_shnum() const;
  private:
  bool _internal_has_e_shnum() const;
  public:
  void clear_e_shnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shnum() const;
  void set_e_shnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_shnum() const;
  void _internal_set_e_shnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 e_shstrndx = 13;
  bool has_e_shstrndx() const;
  private:
  bool _internal_has_e_shstrndx() const;
  public:
  void clear_e_shstrndx();
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shstrndx() const;
  void set_e_shstrndx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_e_shstrndx() const;
  void _internal_set_e_shstrndx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EHDR)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > e_ident_;
  mutable std::atomic<int> _e_ident_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_machine_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_phoff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shoff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_ehsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_phentsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_phnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shentsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 e_shstrndx_;
  friend struct ::TableStruct_elf_2eproto;
};
// -------------------------------------------------------------------

class phdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phdr) */ {
 public:
  inline phdr() : phdr(nullptr) {}
  virtual ~phdr();

  phdr(const phdr& from);
  phdr(phdr&& from) noexcept
    : phdr() {
    *this = ::std::move(from);
  }

  inline phdr& operator=(const phdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline phdr& operator=(phdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const phdr& default_instance();

  static inline const phdr* internal_default_instance() {
    return reinterpret_cast<const phdr*>(
               &_phdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(phdr& a, phdr& b) {
    a.Swap(&b);
  }
  inline void Swap(phdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(phdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline phdr* New() const final {
    return CreateMaybeMessage<phdr>(nullptr);
  }

  phdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<phdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const phdr& from);
  void MergeFrom(const phdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(phdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phdr";
  }
  protected:
  explicit phdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elf_2eproto);
    return ::descriptor_table_elf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPTypeFieldNumber = 1,
    kPFlagsFieldNumber = 2,
    kPOffsetFieldNumber = 3,
    kPVaddrFieldNumber = 4,
    kPAddrFieldNumber = 5,
    kFileszFieldNumber = 6,
    kMemszFieldNumber = 7,
    kAlignFieldNumber = 8,
  };
  // repeated uint32 p_type = 1;
  int p_type_size() const;
  private:
  int _internal_p_type_size() const;
  public:
  void clear_p_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_p_type() const;
  void _internal_add_p_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_p_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 p_type(int index) const;
  void set_p_type(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_p_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      p_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_p_type();

  // required uint32 p_flags = 2;
  bool has_p_flags() const;
  private:
  bool _internal_has_p_flags() const;
  public:
  void clear_p_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 p_flags() const;
  void set_p_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_flags() const;
  void _internal_set_p_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 p_offset = 3;
  bool has_p_offset() const;
  private:
  bool _internal_has_p_offset() const;
  public:
  void clear_p_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 p_offset() const;
  void set_p_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_offset() const;
  void _internal_set_p_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 p_vaddr = 4;
  bool has_p_vaddr() const;
  private:
  bool _internal_has_p_vaddr() const;
  public:
  void clear_p_vaddr();
  ::PROTOBUF_NAMESPACE_ID::uint32 p_vaddr() const;
  void set_p_vaddr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_vaddr() const;
  void _internal_set_p_vaddr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 p_addr = 5;
  bool has_p_addr() const;
  private:
  bool _internal_has_p_addr() const;
  public:
  void clear_p_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 p_addr() const;
  void set_p_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p_addr() const;
  void _internal_set_p_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 filesz = 6;
  bool has_filesz() const;
  private:
  bool _internal_has_filesz() const;
  public:
  void clear_filesz();
  ::PROTOBUF_NAMESPACE_ID::uint32 filesz() const;
  void set_filesz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filesz() const;
  void _internal_set_filesz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 memsz = 7;
  bool has_memsz() const;
  private:
  bool _internal_has_memsz() const;
  public:
  void clear_memsz();
  ::PROTOBUF_NAMESPACE_ID::uint32 memsz() const;
  void set_memsz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_memsz() const;
  void _internal_set_memsz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 align = 8;
  bool has_align() const;
  private:
  bool _internal_has_align() const;
  public:
  void clear_align();
  ::PROTOBUF_NAMESPACE_ID::uint32 align() const;
  void set_align(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_align() const;
  void _internal_set_align(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phdr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > p_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_vaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filesz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memsz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 align_;
  friend struct ::TableStruct_elf_2eproto;
};
// -------------------------------------------------------------------

class shdrs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shdrs) */ {
 public:
  inline shdrs() : shdrs(nullptr) {}
  virtual ~shdrs();

  shdrs(const shdrs& from);
  shdrs(shdrs&& from) noexcept
    : shdrs() {
    *this = ::std::move(from);
  }

  inline shdrs& operator=(const shdrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline shdrs& operator=(shdrs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const shdrs& default_instance();

  static inline const shdrs* internal_default_instance() {
    return reinterpret_cast<const shdrs*>(
               &_shdrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(shdrs& a, shdrs& b) {
    a.Swap(&b);
  }
  inline void Swap(shdrs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(shdrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline shdrs* New() const final {
    return CreateMaybeMessage<shdrs>(nullptr);
  }

  shdrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<shdrs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const shdrs& from);
  void MergeFrom(const shdrs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(shdrs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shdrs";
  }
  protected:
  explicit shdrs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elf_2eproto);
    return ::descriptor_table_elf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShNameFieldNumber = 1,
    kShTypeFieldNumber = 2,
    kShFlagsFieldNumber = 3,
    kShAddrFieldNumber = 4,
    kShOffsetFieldNumber = 5,
    kShSizeFieldNumber = 6,
    kShLinkFieldNumber = 7,
    kShInfoFieldNumber = 8,
    kShAddralignFieldNumber = 9,
    kShEntsizeFieldNumber = 10,
  };
  // required uint32 sh_name = 1;
  bool has_sh_name() const;
  private:
  bool _internal_has_sh_name() const;
  public:
  void clear_sh_name();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_name() const;
  void set_sh_name(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_name() const;
  void _internal_set_sh_name(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_type = 2;
  bool has_sh_type() const;
  private:
  bool _internal_has_sh_type() const;
  public:
  void clear_sh_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_type() const;
  void set_sh_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_type() const;
  void _internal_set_sh_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_flags = 3;
  bool has_sh_flags() const;
  private:
  bool _internal_has_sh_flags() const;
  public:
  void clear_sh_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_flags() const;
  void set_sh_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_flags() const;
  void _internal_set_sh_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_addr = 4;
  bool has_sh_addr() const;
  private:
  bool _internal_has_sh_addr() const;
  public:
  void clear_sh_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_addr() const;
  void set_sh_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_addr() const;
  void _internal_set_sh_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_offset = 5;
  bool has_sh_offset() const;
  private:
  bool _internal_has_sh_offset() const;
  public:
  void clear_sh_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_offset() const;
  void set_sh_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_offset() const;
  void _internal_set_sh_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_size = 6;
  bool has_sh_size() const;
  private:
  bool _internal_has_sh_size() const;
  public:
  void clear_sh_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_size() const;
  void set_sh_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_size() const;
  void _internal_set_sh_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_link = 7;
  bool has_sh_link() const;
  private:
  bool _internal_has_sh_link() const;
  public:
  void clear_sh_link();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_link() const;
  void set_sh_link(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_link() const;
  void _internal_set_sh_link(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_info = 8;
  bool has_sh_info() const;
  private:
  bool _internal_has_sh_info() const;
  public:
  void clear_sh_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_info() const;
  void set_sh_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_info() const;
  void _internal_set_sh_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_addralign = 9;
  bool has_sh_addralign() const;
  private:
  bool _internal_has_sh_addralign() const;
  public:
  void clear_sh_addralign();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_addralign() const;
  void set_sh_addralign(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_addralign() const;
  void _internal_set_sh_addralign(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sh_entsize = 10;
  bool has_sh_entsize() const;
  private:
  bool _internal_has_sh_entsize() const;
  public:
  void clear_sh_entsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_entsize() const;
  void set_sh_entsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sh_entsize() const;
  void _internal_set_sh_entsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:shdrs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_link_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_addralign_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sh_entsize_;
  friend struct ::TableStruct_elf_2eproto;
};
// -------------------------------------------------------------------

class d_un PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:d_un) */ {
 public:
  inline d_un() : d_un(nullptr) {}
  virtual ~d_un();

  d_un(const d_un& from);
  d_un(d_un&& from) noexcept
    : d_un() {
    *this = ::std::move(from);
  }

  inline d_un& operator=(const d_un& from) {
    CopyFrom(from);
    return *this;
  }
  inline d_un& operator=(d_un&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const d_un& default_instance();

  static inline const d_un* internal_default_instance() {
    return reinterpret_cast<const d_un*>(
               &_d_un_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(d_un& a, d_un& b) {
    a.Swap(&b);
  }
  inline void Swap(d_un* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(d_un* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline d_un* New() const final {
    return CreateMaybeMessage<d_un>(nullptr);
  }

  d_un* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<d_un>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const d_un& from);
  void MergeFrom(const d_un& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(d_un* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "d_un";
  }
  protected:
  explicit d_un(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elf_2eproto);
    return ::descriptor_table_elf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDValFieldNumber = 1,
    kDPtrFieldNumber = 2,
  };
  // required uint32 d_val = 1;
  bool has_d_val() const;
  private:
  bool _internal_has_d_val() const;
  public:
  void clear_d_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 d_val() const;
  void set_d_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_d_val() const;
  void _internal_set_d_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 d_ptr = 2;
  bool has_d_ptr() const;
  private:
  bool _internal_has_d_ptr() const;
  public:
  void clear_d_ptr();
  ::PROTOBUF_NAMESPACE_ID::uint32 d_ptr() const;
  void set_d_ptr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_d_ptr() const;
  void _internal_set_d_ptr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:d_un)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 d_val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 d_ptr_;
  friend struct ::TableStruct_elf_2eproto;
};
// -------------------------------------------------------------------

class dyns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dyns) */ {
 public:
  inline dyns() : dyns(nullptr) {}
  virtual ~dyns();

  dyns(const dyns& from);
  dyns(dyns&& from) noexcept
    : dyns() {
    *this = ::std::move(from);
  }

  inline dyns& operator=(const dyns& from) {
    CopyFrom(from);
    return *this;
  }
  inline dyns& operator=(dyns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dyns& default_instance();

  static inline const dyns* internal_default_instance() {
    return reinterpret_cast<const dyns*>(
               &_dyns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(dyns& a, dyns& b) {
    a.Swap(&b);
  }
  inline void Swap(dyns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dyns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dyns* New() const final {
    return CreateMaybeMessage<dyns>(nullptr);
  }

  dyns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dyns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dyns& from);
  void MergeFrom(const dyns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dyns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dyns";
  }
  protected:
  explicit dyns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elf_2eproto);
    return ::descriptor_table_elf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDPtrFieldNumber = 2,
    kDTagFieldNumber = 1,
  };
  // required .d_un d_ptr = 2;
  bool has_d_ptr() const;
  private:
  bool _internal_has_d_ptr() const;
  public:
  void clear_d_ptr();
  const ::d_un& d_ptr() const;
  ::d_un* release_d_ptr();
  ::d_un* mutable_d_ptr();
  void set_allocated_d_ptr(::d_un* d_ptr);
  private:
  const ::d_un& _internal_d_ptr() const;
  ::d_un* _internal_mutable_d_ptr();
  public:
  void unsafe_arena_set_allocated_d_ptr(
      ::d_un* d_ptr);
  ::d_un* unsafe_arena_release_d_ptr();

  // required uint32 d_tag = 1;
  bool has_d_tag() const;
  private:
  bool _internal_has_d_tag() const;
  public:
  void clear_d_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 d_tag() const;
  void set_d_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_d_tag() const;
  void _internal_set_d_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dyns)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::d_un* d_ptr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 d_tag_;
  friend struct ::TableStruct_elf_2eproto;
};
// -------------------------------------------------------------------

class elf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elf) */ {
 public:
  inline elf() : elf(nullptr) {}
  virtual ~elf();

  elf(const elf& from);
  elf(elf&& from) noexcept
    : elf() {
    *this = ::std::move(from);
  }

  inline elf& operator=(const elf& from) {
    CopyFrom(from);
    return *this;
  }
  inline elf& operator=(elf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const elf& default_instance();

  static inline const elf* internal_default_instance() {
    return reinterpret_cast<const elf*>(
               &_elf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(elf& a, elf& b) {
    a.Swap(&b);
  }
  inline void Swap(elf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(elf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline elf* New() const final {
    return CreateMaybeMessage<elf>(nullptr);
  }

  elf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<elf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const elf& from);
  void MergeFrom(const elf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(elf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elf";
  }
  protected:
  explicit elf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_elf_2eproto);
    return ::descriptor_table_elf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhdrzFieldNumber = 2,
    kShaderFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kDynzFieldNumber = 4,
  };
  // repeated .phdr phdrz = 2;
  int phdrz_size() const;
  private:
  int _internal_phdrz_size() const;
  public:
  void clear_phdrz();
  ::phdr* mutable_phdrz(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phdr >*
      mutable_phdrz();
  private:
  const ::phdr& _internal_phdrz(int index) const;
  ::phdr* _internal_add_phdrz();
  public:
  const ::phdr& phdrz(int index) const;
  ::phdr* add_phdrz();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phdr >&
      phdrz() const;

  // repeated .shdrs shader = 3;
  int shader_size() const;
  private:
  int _internal_shader_size() const;
  public:
  void clear_shader();
  ::shdrs* mutable_shader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shdrs >*
      mutable_shader();
  private:
  const ::shdrs& _internal_shader(int index) const;
  ::shdrs* _internal_add_shader();
  public:
  const ::shdrs& shader(int index) const;
  ::shdrs* add_shader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shdrs >&
      shader() const;

  // required .EHDR header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::EHDR& header() const;
  ::EHDR* release_header();
  ::EHDR* mutable_header();
  void set_allocated_header(::EHDR* header);
  private:
  const ::EHDR& _internal_header() const;
  ::EHDR* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::EHDR* header);
  ::EHDR* unsafe_arena_release_header();

  // required .dyns dynz = 4;
  bool has_dynz() const;
  private:
  bool _internal_has_dynz() const;
  public:
  void clear_dynz();
  const ::dyns& dynz() const;
  ::dyns* release_dynz();
  ::dyns* mutable_dynz();
  void set_allocated_dynz(::dyns* dynz);
  private:
  const ::dyns& _internal_dynz() const;
  ::dyns* _internal_mutable_dynz();
  public:
  void unsafe_arena_set_allocated_dynz(
      ::dyns* dynz);
  ::dyns* unsafe_arena_release_dynz();

  // @@protoc_insertion_point(class_scope:elf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phdr > phdrz_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shdrs > shader_;
  ::EHDR* header_;
  ::dyns* dynz_;
  friend struct ::TableStruct_elf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EHDR

// repeated uint32 e_ident = 1 [packed = true];
inline int EHDR::_internal_e_ident_size() const {
  return e_ident_.size();
}
inline int EHDR::e_ident_size() const {
  return _internal_e_ident_size();
}
inline void EHDR::clear_e_ident() {
  e_ident_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_ident(int index) const {
  return e_ident_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_ident(int index) const {
  // @@protoc_insertion_point(field_get:EHDR.e_ident)
  return _internal_e_ident(index);
}
inline void EHDR::set_e_ident(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  e_ident_.Set(index, value);
  // @@protoc_insertion_point(field_set:EHDR.e_ident)
}
inline void EHDR::_internal_add_e_ident(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  e_ident_.Add(value);
}
inline void EHDR::add_e_ident(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_e_ident(value);
  // @@protoc_insertion_point(field_add:EHDR.e_ident)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EHDR::_internal_e_ident() const {
  return e_ident_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EHDR::e_ident() const {
  // @@protoc_insertion_point(field_list:EHDR.e_ident)
  return _internal_e_ident();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EHDR::_internal_mutable_e_ident() {
  return &e_ident_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EHDR::mutable_e_ident() {
  // @@protoc_insertion_point(field_mutable_list:EHDR.e_ident)
  return _internal_mutable_e_ident();
}

// required uint32 e_type = 2;
inline bool EHDR::_internal_has_e_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EHDR::has_e_type() const {
  return _internal_has_e_type();
}
inline void EHDR::clear_e_type() {
  e_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_type() const {
  return e_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_type() const {
  // @@protoc_insertion_point(field_get:EHDR.e_type)
  return _internal_e_type();
}
inline void EHDR::_internal_set_e_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  e_type_ = value;
}
inline void EHDR::set_e_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_type(value);
  // @@protoc_insertion_point(field_set:EHDR.e_type)
}

// required uint32 e_machine = 3;
inline bool EHDR::_internal_has_e_machine() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EHDR::has_e_machine() const {
  return _internal_has_e_machine();
}
inline void EHDR::clear_e_machine() {
  e_machine_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_machine() const {
  return e_machine_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_machine() const {
  // @@protoc_insertion_point(field_get:EHDR.e_machine)
  return _internal_e_machine();
}
inline void EHDR::_internal_set_e_machine(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  e_machine_ = value;
}
inline void EHDR::set_e_machine(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_machine(value);
  // @@protoc_insertion_point(field_set:EHDR.e_machine)
}

// required uint32 e_entry = 4;
inline bool EHDR::_internal_has_e_entry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EHDR::has_e_entry() const {
  return _internal_has_e_entry();
}
inline void EHDR::clear_e_entry() {
  e_entry_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_entry() const {
  return e_entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_entry() const {
  // @@protoc_insertion_point(field_get:EHDR.e_entry)
  return _internal_e_entry();
}
inline void EHDR::_internal_set_e_entry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  e_entry_ = value;
}
inline void EHDR::set_e_entry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_entry(value);
  // @@protoc_insertion_point(field_set:EHDR.e_entry)
}

// required uint32 e_phoff = 5;
inline bool EHDR::_internal_has_e_phoff() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EHDR::has_e_phoff() const {
  return _internal_has_e_phoff();
}
inline void EHDR::clear_e_phoff() {
  e_phoff_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_phoff() const {
  return e_phoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_phoff() const {
  // @@protoc_insertion_point(field_get:EHDR.e_phoff)
  return _internal_e_phoff();
}
inline void EHDR::_internal_set_e_phoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  e_phoff_ = value;
}
inline void EHDR::set_e_phoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_phoff(value);
  // @@protoc_insertion_point(field_set:EHDR.e_phoff)
}

// required uint32 e_shoff = 6;
inline bool EHDR::_internal_has_e_shoff() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EHDR::has_e_shoff() const {
  return _internal_has_e_shoff();
}
inline void EHDR::clear_e_shoff() {
  e_shoff_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_shoff() const {
  return e_shoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_shoff() const {
  // @@protoc_insertion_point(field_get:EHDR.e_shoff)
  return _internal_e_shoff();
}
inline void EHDR::_internal_set_e_shoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  e_shoff_ = value;
}
inline void EHDR::set_e_shoff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_shoff(value);
  // @@protoc_insertion_point(field_set:EHDR.e_shoff)
}

// required uint32 e_flags = 7;
inline bool EHDR::_internal_has_e_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EHDR::has_e_flags() const {
  return _internal_has_e_flags();
}
inline void EHDR::clear_e_flags() {
  e_flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_flags() const {
  return e_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_flags() const {
  // @@protoc_insertion_point(field_get:EHDR.e_flags)
  return _internal_e_flags();
}
inline void EHDR::_internal_set_e_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  e_flags_ = value;
}
inline void EHDR::set_e_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_flags(value);
  // @@protoc_insertion_point(field_set:EHDR.e_flags)
}

// required uint32 e_ehsize = 8;
inline bool EHDR::_internal_has_e_ehsize() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EHDR::has_e_ehsize() const {
  return _internal_has_e_ehsize();
}
inline void EHDR::clear_e_ehsize() {
  e_ehsize_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_ehsize() const {
  return e_ehsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_ehsize() const {
  // @@protoc_insertion_point(field_get:EHDR.e_ehsize)
  return _internal_e_ehsize();
}
inline void EHDR::_internal_set_e_ehsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  e_ehsize_ = value;
}
inline void EHDR::set_e_ehsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_ehsize(value);
  // @@protoc_insertion_point(field_set:EHDR.e_ehsize)
}

// required uint32 e_phentsize = 9;
inline bool EHDR::_internal_has_e_phentsize() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EHDR::has_e_phentsize() const {
  return _internal_has_e_phentsize();
}
inline void EHDR::clear_e_phentsize() {
  e_phentsize_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_phentsize() const {
  return e_phentsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_phentsize() const {
  // @@protoc_insertion_point(field_get:EHDR.e_phentsize)
  return _internal_e_phentsize();
}
inline void EHDR::_internal_set_e_phentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  e_phentsize_ = value;
}
inline void EHDR::set_e_phentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_phentsize(value);
  // @@protoc_insertion_point(field_set:EHDR.e_phentsize)
}

// required uint32 e_phnum = 10;
inline bool EHDR::_internal_has_e_phnum() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool EHDR::has_e_phnum() const {
  return _internal_has_e_phnum();
}
inline void EHDR::clear_e_phnum() {
  e_phnum_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_phnum() const {
  return e_phnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_phnum() const {
  // @@protoc_insertion_point(field_get:EHDR.e_phnum)
  return _internal_e_phnum();
}
inline void EHDR::_internal_set_e_phnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  e_phnum_ = value;
}
inline void EHDR::set_e_phnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_phnum(value);
  // @@protoc_insertion_point(field_set:EHDR.e_phnum)
}

// required uint32 e_shentsize = 11;
inline bool EHDR::_internal_has_e_shentsize() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool EHDR::has_e_shentsize() const {
  return _internal_has_e_shentsize();
}
inline void EHDR::clear_e_shentsize() {
  e_shentsize_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_shentsize() const {
  return e_shentsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_shentsize() const {
  // @@protoc_insertion_point(field_get:EHDR.e_shentsize)
  return _internal_e_shentsize();
}
inline void EHDR::_internal_set_e_shentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  e_shentsize_ = value;
}
inline void EHDR::set_e_shentsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_shentsize(value);
  // @@protoc_insertion_point(field_set:EHDR.e_shentsize)
}

// required uint32 e_shnum = 12;
inline bool EHDR::_internal_has_e_shnum() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool EHDR::has_e_shnum() const {
  return _internal_has_e_shnum();
}
inline void EHDR::clear_e_shnum() {
  e_shnum_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_shnum() const {
  return e_shnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_shnum() const {
  // @@protoc_insertion_point(field_get:EHDR.e_shnum)
  return _internal_e_shnum();
}
inline void EHDR::_internal_set_e_shnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  e_shnum_ = value;
}
inline void EHDR::set_e_shnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_shnum(value);
  // @@protoc_insertion_point(field_set:EHDR.e_shnum)
}

// required uint32 e_shstrndx = 13;
inline bool EHDR::_internal_has_e_shstrndx() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool EHDR::has_e_shstrndx() const {
  return _internal_has_e_shstrndx();
}
inline void EHDR::clear_e_shstrndx() {
  e_shstrndx_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::_internal_e_shstrndx() const {
  return e_shstrndx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EHDR::e_shstrndx() const {
  // @@protoc_insertion_point(field_get:EHDR.e_shstrndx)
  return _internal_e_shstrndx();
}
inline void EHDR::_internal_set_e_shstrndx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  e_shstrndx_ = value;
}
inline void EHDR::set_e_shstrndx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_e_shstrndx(value);
  // @@protoc_insertion_point(field_set:EHDR.e_shstrndx)
}

// -------------------------------------------------------------------

// phdr

// repeated uint32 p_type = 1;
inline int phdr::_internal_p_type_size() const {
  return p_type_.size();
}
inline int phdr::p_type_size() const {
  return _internal_p_type_size();
}
inline void phdr::clear_p_type() {
  p_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_p_type(int index) const {
  return p_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::p_type(int index) const {
  // @@protoc_insertion_point(field_get:phdr.p_type)
  return _internal_p_type(index);
}
inline void phdr::set_p_type(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  p_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:phdr.p_type)
}
inline void phdr::_internal_add_p_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  p_type_.Add(value);
}
inline void phdr::add_p_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_p_type(value);
  // @@protoc_insertion_point(field_add:phdr.p_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
phdr::_internal_p_type() const {
  return p_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
phdr::p_type() const {
  // @@protoc_insertion_point(field_list:phdr.p_type)
  return _internal_p_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
phdr::_internal_mutable_p_type() {
  return &p_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
phdr::mutable_p_type() {
  // @@protoc_insertion_point(field_mutable_list:phdr.p_type)
  return _internal_mutable_p_type();
}

// required uint32 p_flags = 2;
inline bool phdr::_internal_has_p_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool phdr::has_p_flags() const {
  return _internal_has_p_flags();
}
inline void phdr::clear_p_flags() {
  p_flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_p_flags() const {
  return p_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::p_flags() const {
  // @@protoc_insertion_point(field_get:phdr.p_flags)
  return _internal_p_flags();
}
inline void phdr::_internal_set_p_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  p_flags_ = value;
}
inline void phdr::set_p_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p_flags(value);
  // @@protoc_insertion_point(field_set:phdr.p_flags)
}

// required uint32 p_offset = 3;
inline bool phdr::_internal_has_p_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool phdr::has_p_offset() const {
  return _internal_has_p_offset();
}
inline void phdr::clear_p_offset() {
  p_offset_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_p_offset() const {
  return p_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::p_offset() const {
  // @@protoc_insertion_point(field_get:phdr.p_offset)
  return _internal_p_offset();
}
inline void phdr::_internal_set_p_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  p_offset_ = value;
}
inline void phdr::set_p_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p_offset(value);
  // @@protoc_insertion_point(field_set:phdr.p_offset)
}

// required uint32 p_vaddr = 4;
inline bool phdr::_internal_has_p_vaddr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool phdr::has_p_vaddr() const {
  return _internal_has_p_vaddr();
}
inline void phdr::clear_p_vaddr() {
  p_vaddr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_p_vaddr() const {
  return p_vaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::p_vaddr() const {
  // @@protoc_insertion_point(field_get:phdr.p_vaddr)
  return _internal_p_vaddr();
}
inline void phdr::_internal_set_p_vaddr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  p_vaddr_ = value;
}
inline void phdr::set_p_vaddr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p_vaddr(value);
  // @@protoc_insertion_point(field_set:phdr.p_vaddr)
}

// required uint32 p_addr = 5;
inline bool phdr::_internal_has_p_addr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool phdr::has_p_addr() const {
  return _internal_has_p_addr();
}
inline void phdr::clear_p_addr() {
  p_addr_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_p_addr() const {
  return p_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::p_addr() const {
  // @@protoc_insertion_point(field_get:phdr.p_addr)
  return _internal_p_addr();
}
inline void phdr::_internal_set_p_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  p_addr_ = value;
}
inline void phdr::set_p_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p_addr(value);
  // @@protoc_insertion_point(field_set:phdr.p_addr)
}

// required uint32 filesz = 6;
inline bool phdr::_internal_has_filesz() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool phdr::has_filesz() const {
  return _internal_has_filesz();
}
inline void phdr::clear_filesz() {
  filesz_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_filesz() const {
  return filesz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::filesz() const {
  // @@protoc_insertion_point(field_get:phdr.filesz)
  return _internal_filesz();
}
inline void phdr::_internal_set_filesz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  filesz_ = value;
}
inline void phdr::set_filesz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filesz(value);
  // @@protoc_insertion_point(field_set:phdr.filesz)
}

// required uint32 memsz = 7;
inline bool phdr::_internal_has_memsz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool phdr::has_memsz() const {
  return _internal_has_memsz();
}
inline void phdr::clear_memsz() {
  memsz_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_memsz() const {
  return memsz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::memsz() const {
  // @@protoc_insertion_point(field_get:phdr.memsz)
  return _internal_memsz();
}
inline void phdr::_internal_set_memsz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  memsz_ = value;
}
inline void phdr::set_memsz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_memsz(value);
  // @@protoc_insertion_point(field_set:phdr.memsz)
}

// required uint32 align = 8;
inline bool phdr::_internal_has_align() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool phdr::has_align() const {
  return _internal_has_align();
}
inline void phdr::clear_align() {
  align_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::_internal_align() const {
  return align_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 phdr::align() const {
  // @@protoc_insertion_point(field_get:phdr.align)
  return _internal_align();
}
inline void phdr::_internal_set_align(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  align_ = value;
}
inline void phdr::set_align(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_align(value);
  // @@protoc_insertion_point(field_set:phdr.align)
}

// -------------------------------------------------------------------

// shdrs

// required uint32 sh_name = 1;
inline bool shdrs::_internal_has_sh_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool shdrs::has_sh_name() const {
  return _internal_has_sh_name();
}
inline void shdrs::clear_sh_name() {
  sh_name_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_name() const {
  return sh_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_name() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_name)
  return _internal_sh_name();
}
inline void shdrs::_internal_set_sh_name(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sh_name_ = value;
}
inline void shdrs::set_sh_name(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_name(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_name)
}

// required uint32 sh_type = 2;
inline bool shdrs::_internal_has_sh_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool shdrs::has_sh_type() const {
  return _internal_has_sh_type();
}
inline void shdrs::clear_sh_type() {
  sh_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_type() const {
  return sh_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_type() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_type)
  return _internal_sh_type();
}
inline void shdrs::_internal_set_sh_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sh_type_ = value;
}
inline void shdrs::set_sh_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_type(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_type)
}

// required uint32 sh_flags = 3;
inline bool shdrs::_internal_has_sh_flags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool shdrs::has_sh_flags() const {
  return _internal_has_sh_flags();
}
inline void shdrs::clear_sh_flags() {
  sh_flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_flags() const {
  return sh_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_flags() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_flags)
  return _internal_sh_flags();
}
inline void shdrs::_internal_set_sh_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sh_flags_ = value;
}
inline void shdrs::set_sh_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_flags(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_flags)
}

// required uint32 sh_addr = 4;
inline bool shdrs::_internal_has_sh_addr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool shdrs::has_sh_addr() const {
  return _internal_has_sh_addr();
}
inline void shdrs::clear_sh_addr() {
  sh_addr_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_addr() const {
  return sh_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_addr() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_addr)
  return _internal_sh_addr();
}
inline void shdrs::_internal_set_sh_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sh_addr_ = value;
}
inline void shdrs::set_sh_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_addr(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_addr)
}

// required uint32 sh_offset = 5;
inline bool shdrs::_internal_has_sh_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool shdrs::has_sh_offset() const {
  return _internal_has_sh_offset();
}
inline void shdrs::clear_sh_offset() {
  sh_offset_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_offset() const {
  return sh_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_offset() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_offset)
  return _internal_sh_offset();
}
inline void shdrs::_internal_set_sh_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sh_offset_ = value;
}
inline void shdrs::set_sh_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_offset(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_offset)
}

// required uint32 sh_size = 6;
inline bool shdrs::_internal_has_sh_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool shdrs::has_sh_size() const {
  return _internal_has_sh_size();
}
inline void shdrs::clear_sh_size() {
  sh_size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_size() const {
  return sh_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_size() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_size)
  return _internal_sh_size();
}
inline void shdrs::_internal_set_sh_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  sh_size_ = value;
}
inline void shdrs::set_sh_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_size(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_size)
}

// required uint32 sh_link = 7;
inline bool shdrs::_internal_has_sh_link() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool shdrs::has_sh_link() const {
  return _internal_has_sh_link();
}
inline void shdrs::clear_sh_link() {
  sh_link_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_link() const {
  return sh_link_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_link() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_link)
  return _internal_sh_link();
}
inline void shdrs::_internal_set_sh_link(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  sh_link_ = value;
}
inline void shdrs::set_sh_link(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_link(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_link)
}

// required uint32 sh_info = 8;
inline bool shdrs::_internal_has_sh_info() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool shdrs::has_sh_info() const {
  return _internal_has_sh_info();
}
inline void shdrs::clear_sh_info() {
  sh_info_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_info() const {
  return sh_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_info() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_info)
  return _internal_sh_info();
}
inline void shdrs::_internal_set_sh_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sh_info_ = value;
}
inline void shdrs::set_sh_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_info(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_info)
}

// required uint32 sh_addralign = 9;
inline bool shdrs::_internal_has_sh_addralign() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool shdrs::has_sh_addralign() const {
  return _internal_has_sh_addralign();
}
inline void shdrs::clear_sh_addralign() {
  sh_addralign_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_addralign() const {
  return sh_addralign_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_addralign() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_addralign)
  return _internal_sh_addralign();
}
inline void shdrs::_internal_set_sh_addralign(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  sh_addralign_ = value;
}
inline void shdrs::set_sh_addralign(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_addralign(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_addralign)
}

// required uint32 sh_entsize = 10;
inline bool shdrs::_internal_has_sh_entsize() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool shdrs::has_sh_entsize() const {
  return _internal_has_sh_entsize();
}
inline void shdrs::clear_sh_entsize() {
  sh_entsize_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::_internal_sh_entsize() const {
  return sh_entsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 shdrs::sh_entsize() const {
  // @@protoc_insertion_point(field_get:shdrs.sh_entsize)
  return _internal_sh_entsize();
}
inline void shdrs::_internal_set_sh_entsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  sh_entsize_ = value;
}
inline void shdrs::set_sh_entsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sh_entsize(value);
  // @@protoc_insertion_point(field_set:shdrs.sh_entsize)
}

// -------------------------------------------------------------------

// d_un

// required uint32 d_val = 1;
inline bool d_un::_internal_has_d_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool d_un::has_d_val() const {
  return _internal_has_d_val();
}
inline void d_un::clear_d_val() {
  d_val_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 d_un::_internal_d_val() const {
  return d_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 d_un::d_val() const {
  // @@protoc_insertion_point(field_get:d_un.d_val)
  return _internal_d_val();
}
inline void d_un::_internal_set_d_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  d_val_ = value;
}
inline void d_un::set_d_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_d_val(value);
  // @@protoc_insertion_point(field_set:d_un.d_val)
}

// required uint32 d_ptr = 2;
inline bool d_un::_internal_has_d_ptr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool d_un::has_d_ptr() const {
  return _internal_has_d_ptr();
}
inline void d_un::clear_d_ptr() {
  d_ptr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 d_un::_internal_d_ptr() const {
  return d_ptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 d_un::d_ptr() const {
  // @@protoc_insertion_point(field_get:d_un.d_ptr)
  return _internal_d_ptr();
}
inline void d_un::_internal_set_d_ptr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  d_ptr_ = value;
}
inline void d_un::set_d_ptr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_d_ptr(value);
  // @@protoc_insertion_point(field_set:d_un.d_ptr)
}

// -------------------------------------------------------------------

// dyns

// required uint32 d_tag = 1;
inline bool dyns::_internal_has_d_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dyns::has_d_tag() const {
  return _internal_has_d_tag();
}
inline void dyns::clear_d_tag() {
  d_tag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dyns::_internal_d_tag() const {
  return d_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dyns::d_tag() const {
  // @@protoc_insertion_point(field_get:dyns.d_tag)
  return _internal_d_tag();
}
inline void dyns::_internal_set_d_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  d_tag_ = value;
}
inline void dyns::set_d_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_d_tag(value);
  // @@protoc_insertion_point(field_set:dyns.d_tag)
}

// required .d_un d_ptr = 2;
inline bool dyns::_internal_has_d_ptr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || d_ptr_ != nullptr);
  return value;
}
inline bool dyns::has_d_ptr() const {
  return _internal_has_d_ptr();
}
inline void dyns::clear_d_ptr() {
  if (d_ptr_ != nullptr) d_ptr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::d_un& dyns::_internal_d_ptr() const {
  const ::d_un* p = d_ptr_;
  return p != nullptr ? *p : reinterpret_cast<const ::d_un&>(
      ::_d_un_default_instance_);
}
inline const ::d_un& dyns::d_ptr() const {
  // @@protoc_insertion_point(field_get:dyns.d_ptr)
  return _internal_d_ptr();
}
inline void dyns::unsafe_arena_set_allocated_d_ptr(
    ::d_un* d_ptr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_ptr_);
  }
  d_ptr_ = d_ptr;
  if (d_ptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dyns.d_ptr)
}
inline ::d_un* dyns::release_d_ptr() {
  _has_bits_[0] &= ~0x00000001u;
  ::d_un* temp = d_ptr_;
  d_ptr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::d_un* dyns::unsafe_arena_release_d_ptr() {
  // @@protoc_insertion_point(field_release:dyns.d_ptr)
  _has_bits_[0] &= ~0x00000001u;
  ::d_un* temp = d_ptr_;
  d_ptr_ = nullptr;
  return temp;
}
inline ::d_un* dyns::_internal_mutable_d_ptr() {
  _has_bits_[0] |= 0x00000001u;
  if (d_ptr_ == nullptr) {
    auto* p = CreateMaybeMessage<::d_un>(GetArena());
    d_ptr_ = p;
  }
  return d_ptr_;
}
inline ::d_un* dyns::mutable_d_ptr() {
  // @@protoc_insertion_point(field_mutable:dyns.d_ptr)
  return _internal_mutable_d_ptr();
}
inline void dyns::set_allocated_d_ptr(::d_un* d_ptr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete d_ptr_;
  }
  if (d_ptr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(d_ptr);
    if (message_arena != submessage_arena) {
      d_ptr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d_ptr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_ptr_ = d_ptr;
  // @@protoc_insertion_point(field_set_allocated:dyns.d_ptr)
}

// -------------------------------------------------------------------

// elf

// required .EHDR header = 1;
inline bool elf::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool elf::has_header() const {
  return _internal_has_header();
}
inline void elf::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::EHDR& elf::_internal_header() const {
  const ::EHDR* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::EHDR&>(
      ::_EHDR_default_instance_);
}
inline const ::EHDR& elf::header() const {
  // @@protoc_insertion_point(field_get:elf.header)
  return _internal_header();
}
inline void elf::unsafe_arena_set_allocated_header(
    ::EHDR* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elf.header)
}
inline ::EHDR* elf::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::EHDR* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EHDR* elf::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:elf.header)
  _has_bits_[0] &= ~0x00000001u;
  ::EHDR* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::EHDR* elf::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::EHDR>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::EHDR* elf::mutable_header() {
  // @@protoc_insertion_point(field_mutable:elf.header)
  return _internal_mutable_header();
}
inline void elf::set_allocated_header(::EHDR* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:elf.header)
}

// repeated .phdr phdrz = 2;
inline int elf::_internal_phdrz_size() const {
  return phdrz_.size();
}
inline int elf::phdrz_size() const {
  return _internal_phdrz_size();
}
inline void elf::clear_phdrz() {
  phdrz_.Clear();
}
inline ::phdr* elf::mutable_phdrz(int index) {
  // @@protoc_insertion_point(field_mutable:elf.phdrz)
  return phdrz_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phdr >*
elf::mutable_phdrz() {
  // @@protoc_insertion_point(field_mutable_list:elf.phdrz)
  return &phdrz_;
}
inline const ::phdr& elf::_internal_phdrz(int index) const {
  return phdrz_.Get(index);
}
inline const ::phdr& elf::phdrz(int index) const {
  // @@protoc_insertion_point(field_get:elf.phdrz)
  return _internal_phdrz(index);
}
inline ::phdr* elf::_internal_add_phdrz() {
  return phdrz_.Add();
}
inline ::phdr* elf::add_phdrz() {
  // @@protoc_insertion_point(field_add:elf.phdrz)
  return _internal_add_phdrz();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phdr >&
elf::phdrz() const {
  // @@protoc_insertion_point(field_list:elf.phdrz)
  return phdrz_;
}

// repeated .shdrs shader = 3;
inline int elf::_internal_shader_size() const {
  return shader_.size();
}
inline int elf::shader_size() const {
  return _internal_shader_size();
}
inline void elf::clear_shader() {
  shader_.Clear();
}
inline ::shdrs* elf::mutable_shader(int index) {
  // @@protoc_insertion_point(field_mutable:elf.shader)
  return shader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shdrs >*
elf::mutable_shader() {
  // @@protoc_insertion_point(field_mutable_list:elf.shader)
  return &shader_;
}
inline const ::shdrs& elf::_internal_shader(int index) const {
  return shader_.Get(index);
}
inline const ::shdrs& elf::shader(int index) const {
  // @@protoc_insertion_point(field_get:elf.shader)
  return _internal_shader(index);
}
inline ::shdrs* elf::_internal_add_shader() {
  return shader_.Add();
}
inline ::shdrs* elf::add_shader() {
  // @@protoc_insertion_point(field_add:elf.shader)
  return _internal_add_shader();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shdrs >&
elf::shader() const {
  // @@protoc_insertion_point(field_list:elf.shader)
  return shader_;
}

// required .dyns dynz = 4;
inline bool elf::_internal_has_dynz() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dynz_ != nullptr);
  return value;
}
inline bool elf::has_dynz() const {
  return _internal_has_dynz();
}
inline void elf::clear_dynz() {
  if (dynz_ != nullptr) dynz_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::dyns& elf::_internal_dynz() const {
  const ::dyns* p = dynz_;
  return p != nullptr ? *p : reinterpret_cast<const ::dyns&>(
      ::_dyns_default_instance_);
}
inline const ::dyns& elf::dynz() const {
  // @@protoc_insertion_point(field_get:elf.dynz)
  return _internal_dynz();
}
inline void elf::unsafe_arena_set_allocated_dynz(
    ::dyns* dynz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynz_);
  }
  dynz_ = dynz;
  if (dynz) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elf.dynz)
}
inline ::dyns* elf::release_dynz() {
  _has_bits_[0] &= ~0x00000002u;
  ::dyns* temp = dynz_;
  dynz_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dyns* elf::unsafe_arena_release_dynz() {
  // @@protoc_insertion_point(field_release:elf.dynz)
  _has_bits_[0] &= ~0x00000002u;
  ::dyns* temp = dynz_;
  dynz_ = nullptr;
  return temp;
}
inline ::dyns* elf::_internal_mutable_dynz() {
  _has_bits_[0] |= 0x00000002u;
  if (dynz_ == nullptr) {
    auto* p = CreateMaybeMessage<::dyns>(GetArena());
    dynz_ = p;
  }
  return dynz_;
}
inline ::dyns* elf::mutable_dynz() {
  // @@protoc_insertion_point(field_mutable:elf.dynz)
  return _internal_mutable_dynz();
}
inline void elf::set_allocated_dynz(::dyns* dynz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dynz_;
  }
  if (dynz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dynz);
    if (message_arena != submessage_arena) {
      dynz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynz, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dynz_ = dynz;
  // @@protoc_insertion_point(field_set_allocated:elf.dynz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_elf_2eproto
